version: '3.8'

# Variables de entorno comunes
x-common-env: &common-env
  NODE_ENV: production
  TZ: America/Argentina/Buenos_Aires

# Configuración de redes
networks:
  cloudcam_network:
    driver: bridge
  cloudcam_network_public:
    driver: bridge

# Volúmenes para persistencia de datos
volumes:
  postgres_data:
  redis_data:
  redis_insights_data:
  prometheus_data:
  grafana_data:
  filebeat_data:
  elasticsearch_data:
  storage_data:

# Servicios
services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: cloudcam_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cloudcam_prod}
      POSTGRES_USER: ${POSTGRES_USER:-cloudcam_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-$(openssl rand -base64 32)}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backup/postgres:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - cloudcam_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis para caché y colas
  redis:
    image: redis:7-alpine
    container_name: cloudcam_redis
    restart: unless-stopped
    command: redis-server --requirepass my_secure_redis_password --appendonly yes --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
      - ./backup/redis:/backup
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "my_secure_redis_password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cloudcam_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloudcam_api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      <<: *common-env
      DATABASE_URL: postgresql://${POSTGRES_USER:-cloudcam_user}:${POSTGRES_PASSWORD:-cloudcam_password}@postgres:5432/${POSTGRES_DB:-cloudcam}
      REDIS_URL: redis://default:${REDIS_PASSWORD:-$(openssl rand -base64 32)}@redis:6379
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      HOST: 0.0.0.0
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      STORAGE_DIR: /app/storage
      SEGMENT_DURATION: ${SEGMENT_DURATION:-300}
      MAX_STORAGE_GB: ${MAX_STORAGE_GB:-10}
      ENABLE_VIDEO_ENCRYPTION: ${ENABLE_VIDEO_ENCRYPTION:-false}
      AES_ENCRYPTION_KEY: ${AES_ENCRYPTION_KEY:-your_secure_encryption_key}
      JWT_SECRET: ${JWT_SECRET:-$(openssl rand -base64 32)}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-$(openssl rand -base64 32)}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      SOCKET_SECRET: ${SOCKET_SECRET:-$(openssl rand -base64 32)}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL:-http://localhost:3000/api/auth/google/callback}
      GOOGLE_SERVICE_ACCOUNT_EMAIL: ${GOOGLE_SERVICE_ACCOUNT_EMAIL:-}
      GOOGLE_SERVICE_ACCOUNT_KEY: ${GOOGLE_SERVICE_ACCOUNT_KEY:-}
      RATE_LIMIT_WINDOW: 900000
      RATE_LIMIT_MAX: 100
      MAX_SCAN_THREADS: 20
      DISCOVERY_TIMEOUT: 60000
      LOG_LEVEL: info
      LOG_TO_FILE: 'true'
      LOG_FILE_PATH: /var/log/cloudcam/backend.log
      UPLOAD_DIR: /app/uploads
      MAX_UPLOAD_SIZE: 50MB
      ALLOWED_NETWORK_RANGES: ${ALLOWED_NETWORK_RANGES:-192.168.0.0/16,10.0.0.0/8,172.16.0.0/12}
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - storage_data:/app/storage
      - ./backend/uploads:/app/uploads
      - ./logs/backend:/var/log/cloudcam
      - ./shared:/app/shared
    networks:
      - cloudcam_network
      - cloudcam_network_public
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: cloudcam_frontend
    restart: unless-stopped
    depends_on:
      - api
    environment:
      <<: *common-env
      VITE_API_URL: ${VITE_API_URL:-https://api.cloudcam.example.com}
      VITE_SOCKET_URL: ${VITE_SOCKET_URL:-wss://api.cloudcam.example.com}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./frontend/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/nginx/conf.d:/etc/nginx/conf.d
      - ./certs:/etc/nginx/certs
      - ./logs/nginx:/var/log/nginx
    networks:
      - cloudcam_network_public
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Redis Commander (Interfaz web para Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cloudcam_redis_commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0
      - HTTP_USER=admin
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-$(openssl rand -base64 32)}
    depends_on:
      - redis
    ports:
      - "8081:8081"
    networks:
      - cloudcam_network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # Prometheus para monitoreo
  prometheus:
    image: prom/prometheus:latest
    container_name: cloudcam_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus:/etc/prometheus
      - ./monitoring/prometheus/rules.yml:/etc/prometheus/rules.yml
    ports:
      - "9090:9090"
    networks:
      - cloudcam_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana para visualización de métricas
  grafana:
    image: grafana/grafana:latest
    container_name: cloudcam_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - cloudcam_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://admin:$${GRAFANA_ADMIN_PASSWORD:-admin}@localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
