# Etapa de construcción
FROM node:18-alpine AS builder

# Establecer el directorio de trabajo
WORKDIR /app

# Crear directorio de trabajo
WORKDIR /app

# Copiar archivos de configuración del backend
COPY backend/package*.json ./backend/
COPY backend/tsconfig*.json ./backend/
COPY tsconfig.base.json ./
COPY shared/ ./shared/

# Instalar dependencias de desarrollo para la compilación
WORKDIR /app/backend
RUN npm install --include=dev

# Copiar código fuente
COPY backend/src/ ./src/

# Compilar TypeScript
RUN npm run build

# Etapa de producción
FROM node:18-alpine

# Instalar dependencias de tiempo de ejecución
RUN apk add --no-cache tini

# Establecer el directorio de trabajo
WORKDIR /app

# Copiar dependencias de producción
COPY --from=builder /app/backend/package*.json ./

# Instalar solo dependencias de producción
RUN npm ci --only=production

# Copiar archivos compilados
COPY --from=builder /app/backend/dist/ ./dist/

# Copiar archivos estáticos si los hay
COPY --from=builder /app/backend/public/ ./public/

# Crear directorios necesarios
RUN mkdir -p /var/log/cloudcam /app/uploads /app/storage

# Crear usuario no root
RUN addgroup -S appgroup && \
    adduser -S appuser -G appgroup && \
    chown -R appuser:appgroup /app /var/log/cloudcam /app/uploads /app/storage

# Cambiar al usuario no root
USER appuser

# Variables de entorno por defecto
ENV NODE_ENV=production \
    PORT=3001 \
    LOG_LEVEL=info \
    LOG_TO_FILE=true \
    LOG_FILE_PATH=/var/log/cloudcam/backend.log \
    UPLOAD_DIR=/app/uploads \
    MAX_UPLOAD_SIZE=50MB

# Exponer el puerto de la aplicación
EXPOSE 3001

# Usar tini como proceso init
ENTRYPOINT ["/sbin/tini", "--"]

# Comando de inicio
CMD ["node", "dist/index.js"]

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1
